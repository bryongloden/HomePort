/*Copyright 2011 Aalborg University. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice, this list
      of conditions and the following disclaimer in the documentation and/or other materials
      provided with the distribution.

THIS SOFTWARE IS PROVIDED BY Aalborg University ''AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Aalborg University OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those of the
authors and should not be interpreted as representing official policies, either expressed*/

#ifndef HOMEPORT_H
#define HOMEPORT_H

#include <stddef.h>

struct ev_loop;
struct lr;

typedef ${C}  struct HomePort HomePort;
typedef ${C}  struct Configuration Configuration;
typedef ${C}  struct Adapter Adapter;
typedef ${C}  struct Device Device;
typedef ${C}  struct Service Service;
typedef ${C}  struct Parameter Parameter;
typedef const struct Request Request;
typedef ${C}  struct Listener Listener;
typedef       enum error_code ErrorCode;

typedef void (*free_f)             (void *data);
typedef int  (*init_f)             (HomePort *homeport, void *data);
typedef void (*deinit_f)           (HomePort *homeport, void *data);
typedef void (*val_err_cb)         (Service *service, void *data, ErrorCode code, const char *val, size_t len);
typedef void (*val_cb)             (Service *service, void *data, const char *val, size_t len);
typedef void (*dev_cb)             (void *data, Device *device);
typedef void (*serviceGetFunction) (Service* service, Request req);
typedef void (*servicePutFunction) (Service* service, Request req, const char *put_value, size_t len);

// HTTP status codes according to
// http://www.w3.org/Protocols/rfc2616/rfc2616.html
#define HTTP_STATUS_CODE_MAP(XX) \
   XX(200,200 OK) \
   XX(201,201 Created) \
   XX(303,303 See Other) \
   XX(400,400 Bad Request) \
   XX(404,404 Not Found) \
   XX(405,405 Method Not Allowed) \
   XX(406,406 Not Acceptable) \
   XX(408,408 Request Timeout) \
   XX(415,415 Unsupported Media Type) \
   XX(500,500 Internal Server Error) \
   XX(504,504 Gateway Timeout)

/// HTTP status codes
/**
 *  According to RFC 2616, see
 *  http://www.w3.org/Protocols/rfc2616/rfc2616.html
 */
enum error_code
{
#define XX(num, str) ERR_##num = num,
	HTTP_STATUS_CODE_MAP(XX)
#undef XX
};

struct HomePort
{
   ${C} struct lr *rest_interface;
   ${C} Configuration *configuration;
   struct ev_loop * ${C} loop;
};

struct Configuration
{
   // Navigational members
   ${C} Adapter  *adapter_head;
   ${C} Listener *listener_head;
};

struct Adapter
{
   // Navigational members
   ${C} Configuration *configuration;
   ${C} Device        *device_head;
   ${C} Adapter       *next;
   ${C} Adapter       *prev;
   // Data members
   ${C} char          *id;
   ${C} char          *network;
   // User data
   ${C} free_f         free_data;
   ${C} void          *data;
};

struct Device
{
   // Navigational members
   ${C} Adapter *adapter;
   ${C} Service *service_head; /**<The first Service of the Service List*/
   ${C} Device  *next;
   ${C} Device  *prev;
   // Internal state
   ${C} char    attached;
   // Data members
   ${C} char    *description;  /**<The Device description*/
   ${C} char    *id;           /**<The Device ID*/
   ${C} char    *vendorId;     /**<The ID of the vendor*/
   ${C} char    *productId;    /**<The ID of the product*/
   ${C} char    *version;      /**<The Device version*/
   ${C} char    *location;     /**<The location of the Device*/
   ${C} char    *type;         /**<The Device type*/
   // User data
   ${C} free_f   free_data;
   ${C} void    *data;
};

struct Service
{
   // Navigational members
   ${C} Device             *device;
   ${C} Parameter          *parameter;   /**<The first Parameter of the Parameter List*/
   ${C} Service            *next;
   ${C} Service            *prev;
   ${C} Listener           *listener_head;
   // Data members
   ${C} char               *description; /**<The Service description*/
   ${C} int                 isActuator;  /**<Determine if the service is an actuator or a sensro */
   ${C} char               *type;        /**<The Service type*/
   ${C} char               *unit;        /**<The unit provided by the Service*/
   ${C} serviceGetFunction  getFunction; /**<A pointer to the GET function of the Service*/
   ${C} servicePutFunction  putFunction; /**<A pointer to the PUT function of the Service*/
   ${C} char               *id;          /**<The Service ID*/
   ${C} char               *uri;         /**<The Service URI*/
   // User data
   ${C} free_f              free_data;
   ${C} void               *data;        /**<Pointer used for the used to store its data*/
};

struct Parameter
{
   ${C} char *max;    /**<The maximum value of the Parameter*/
   ${C} char *min;    /**<The minimum value of the Parameter*/
   ${C} char *scale;  /**<The Scale of the Parameter*/
   ${C} char *step;   /**<The Step of the values of the Parameter*/
   ${C} char *type;   /**<The Type of values for the Parameter*/
   ${C} char *unit;   /**<The Unit of the values of the Parameter*/
   ${C} char *values; /**<The possible values for the Parameter*/
};

struct Request {
   val_err_cb on_response;
   void *data;
};

struct Listener {
   enum { SERVICE_LISTENER, DEVICE_LISTENER } type;
   // Navigational members
   union {
      ${C} Service  *service;
      ${C} HomePort *homeport;
   };
   ${C} Listener *next;
   ${C} Listener *prev;
   // Internal state
   ${C} char      subscribed;
   // Data members
   union {
      struct {
         ${C} val_cb    on_change;
      };
      struct {
         ${C} dev_cb    on_attach;
         ${C} dev_cb    on_detach;
      };
   };
   // User data
   void          *data;
   free_f         on_free;
};

/* Note on homePort functions and const keyword on the above structs is really a hack and we DO change them inside homeport */

// Homeport Service Control
HomePort  *homePortNew           (struct ev_loop *loop, int port);
void       homePortFree          (HomePort *homeport);
int        homePortStart         (HomePort *homeport);
void       homePortStop          (HomePort *homeport);
int        homePortEasy          (init_f init, deinit_f deinit, void *data, int port);

// Configurator Interface
Adapter   *homePortNewAdapter    (HomePort *homeport, const char *network, void *data, free_f free_data);
Device    *homePortNewDevice     (Adapter *adapter, const char *description, const char *vendorId, const char *productId,
                                  const char *version, const char *location, const char *type, void *data, free_f free_data);
Service   *homePortNewService    (Device *device, const char *description, int isActuator, const char *type, const char *unit,
                                  serviceGetFunction getFunction, servicePutFunction putFunction, Parameter *parameter, void* data, free_f free_data); 
Parameter *homePortNewParameter  (const char *max, const char *min, const char *scale, const char *step,
                                       const char *type, const char *unit, const char *values);
void       homePortFreeAdapter      (Adapter *adapter);
void       homePortFreeDevice       (Device *device); 
void       homePortFreeService      (Service *service);
void       homePortFreeParameter    (Parameter *parameter);
int        homePortAttachDevice     (HomePort *homeport, Device *device);
int        homePortDetachAllDevices (HomePort *homeport, Adapter *adapter);
int        homePortDetachDevice     (HomePort *homeport, Device *device);

// Find functions -- set parameter to NULL to "skip" it
#define homePortFindAdapter(_HP, _ID) homePortFindFirstAdapter(_HP, _ID, NULL)
#define homePortFindDevice(_A, _ID) homePortFindFirstDevice(_A, NULL, _ID, NULL, NULL, NULL, NULL, NULL)
#define homePortFindService(_D, _ID) homePortFindFirstAdapter(_D, NULL, NULL, NULL, NULL, _ID, NULL)
Adapter *homePortFindFirstAdapter (HomePort *homeport, const char *id, const char *network);
Device  *homePortFindFirstDevice  (Adapter *adapter, const char *description, const char *id, const char *vendorId,
                                   const char *productId, const char *version, const char *location, const char *type);
Service *homePortFindFirstService (Device *device, const char *description, const int  *isActuator, const char *type,
                                   const char *unit, const char *id, const char *uri);

// Communication interface
void      homePortRespond               (Service *service, Request req, ErrorCode code, const char *val, size_t len);
void      homePortChanged               (Service *service, const char *val, size_t len);
void      homePortGet                   (Service *service, val_err_cb on_response, void *data);
void      homePortSet                   (Service *service, const char *val, size_t len, val_err_cb on_response, void *data);
Listener *homePortNewServiceListener    (Service *srv, val_cb on_change, void *data, free_f on_free);
Listener *homePortNewDeviceListener     (HomePort *hp, dev_cb on_attach, dev_cb on_detach, void *data, free_f on_free);
void      homePortFreeListener          (Listener *l);
void      homePortSubscribe             (Listener *l);
void      homePortUnsubscribe           (Listener *l);
void      homePortForAllAttachedDevices (Listener *l);

#endif
